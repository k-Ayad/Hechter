{{ 'section-main-page.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

<div class="page-width page-width--narrow section-{{ section.id }}-padding">
  <h1 class="main-page-title page-title h0{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}">
    {{ page.title | escape }}
  </h1>
  <div id="wishlist-container"></div>
  <div class="rte{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
    {{ page.content }}
  </div>
</div>
<script>
    const productList = JSON.parse(localStorage.getItem('wishList')) || [];
    const productIds = productList.map(product => product.id); // Get all product IDs

    const fetchProductDetails = async (productIds) => {
    {% comment %} const query = `
        {
        products(first: 10, query: "id:(${productIds.join(',')})") {
            edges {
            node {
                id
                title
                handle
                descriptionHtml
                priceRangeV2 {
                minVariantPrice {
                    amount
                    currencyCode
                }
                }
                images(first: 1) {
                edges {
                    node {
                    src
                    }
                }
                }
            }
            }
        }
        }
    `;

    const response = await fetch('/api/2023-01/graphql.json', {
        method: 'POST',
        headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Storefront-Access-Token': 'your-storefront-access-token',
        },
        body: JSON.stringify({ query })
    });

    const result = await response.json();
    const products = result.data.products.edges.map(edge => edge.node); {% endcomment %}
    renderWishlist(products);
    };

    const renderWishlist = (products) => {
    const wishlistContainer = document.getElementById('wishlist-container');
    wishlistContainer.innerHTML = '<div>hello</div>'; // Clear any previous content

    {% comment %} products.forEach(product => {
        const productElement = document.createElement('div');
        productElement.classList.add('product-card');
        productElement.innerHTML = `
        <div class="product-image">
            <img src="${product.images.edges[0].node.src}" alt="${product.title}" />
        </div>
        <div class="product-info">
            <h3>${product.title}</h3>
            <p>${product.descriptionHtml}</p>
            <p>Price: ${product.priceRangeV2.minVariantPrice.amount} ${product.priceRangeV2.minVariantPrice.currencyCode}</p>
        </div>
        `;
        wishlistContainer.appendChild(productElement);
    }); {% endcomment %}
    };

    // Fetch and render the wishlist products
    fetchProductDetails(productIds);
</script>
{% schema %}
{
  "name": "t:sections.main-page.name",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}
